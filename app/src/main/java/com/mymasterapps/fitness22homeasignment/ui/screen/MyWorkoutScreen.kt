package com.mymasterapps.fitness22homeasignment.ui.screen

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.mymasterapps.fitness22homeasignment.ui.components.ExerciseCard
import com.mymasterapps.fitness22homeasignment.ui.workouts.WorkoutViewModel

@Composable
fun MyWorkoutScreen(vm: WorkoutViewModel = viewModel()) {
    val day by vm.day.collectAsState()

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–µ–ø–æ –ø–æ–∑–∂–µ, –∞ –ø–æ–∫–∞ ‚Äî —Å–ø–∏—Å–æ–∫:
    var selectedDay by remember { mutableStateOf(1) }
    val availableDays = listOf(1, 3, 4)

    LaunchedEffect(selectedDay) { vm.load(selectedDay) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.surface)
            .statusBarsPadding()
            .navigationBarsPadding()
    ) {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        Text(
            text = "My Workout",
            style = MaterialTheme.typography.headlineSmall,
            modifier = Modifier.padding(start = 16.dp, top = 8.dp, bottom = 8.dp)
        )

        // –ß–∏–ø—ã –¥–Ω–µ–π
        Row(
            modifier = Modifier
                .padding(horizontal = 12.dp)
                .padding(bottom = 8.dp),
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            availableDays.forEach { d ->
                FilterChip(
                    selected = selectedDay == d,
                    onClick = { selectedDay = d },
                    label = { Text("Day $d") }
                )
            }
        }

        // –°–≤–æ–¥–∫–∞ (–∫–æ–ª-–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π / –≤—Ä–µ–º—è / –∫–∞–ª–æ—Ä–∏–∏)
        val count = day?.exercises?.size ?: 0
        SummaryBar(
            count = count,
            minutes = estimateMinutes(count), // –ø—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞
            calories = estimateCalories(count)
        )

        Spacer(Modifier.height(8.dp))

        // –°–ø–∏—Å–æ–∫
        LazyColumn(
            contentPadding = PaddingValues(bottom = 24.dp)
        ) {
            val list = day?.exercises
            if (list == null) {
                item { Text("Loading‚Ä¶", modifier = Modifier.padding(16.dp)) }
            } else {
                items(list, key = { it.id }) { ex ->
                    ExerciseCard(ex = ex)
                }
            }
        }
    }
}

@Composable
private fun SummaryBar(
    count: Int,
    minutes: Int,
    calories: Int
) {
    Surface(
        color = MaterialTheme.colorScheme.surfaceVariant,
        tonalElevation = 1.dp,
        shape = MaterialTheme.shapes.medium,
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 12.dp)
    ) {
        Row(
            Modifier.padding(horizontal = 16.dp, vertical = 12.dp),
            horizontalArrangement = Arrangement.spacedBy(20.dp)
        ) {
            Text("‚ö° $count Exercises")
            Text("‚è± $minutes Min")
            Text("üî• $calories Cal")
        }
    }
}

// –≥—Ä—É–±—ã–µ –æ—Ü–µ–Ω–∫–∏, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–¥–∫—É (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏)
private fun estimateMinutes(count: Int) = (count * 8.5).toInt().coerceAtLeast(10)
private fun estimateCalories(count: Int) = (count * 40).coerceAtLeast(120)